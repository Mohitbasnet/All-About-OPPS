Concepts of object oriented programming.
Importance of OPPS
* Generality to Speciality
* You can make your own data types

Class
* Data or Property/attribute
* Functions or Behavior
* class Should be written in camelcase
* function should be written in snake case

Object:
* Object is an instance of the class.
* In python everything is object


Function vs Methods
* Methods are basically  special functions which are written inside the classes  and can be accessed by only the object of that class whereas Function is a normal function which is not inside any class and can be accessed by any objects

Constructor : __init__()
* It is a special method in which the code inside it, will automatically executed in the time of object creation of that class.
* It is also called magic method or dunder method

Common Example To Understand Constructor:
* If God is a programmer then this Universe is Class, The Human Beings are Objects and the Death is Constructor.
* We write the code which should automatically executed, when we open any website connect to the database and internet, * * Accessing  GPS, and configuration codes are written in the Constructor.
* Actually, the Name it self define the main goal of Constructor mean build something, create something.

Concept of self
* The everything like data or methods in the class can only accessed by only the object of that class.
* Self is nothing but  current object of that class.
* The one method of the class can communicate to another method of that calls using self which is object of that class.
* You can give anyname instead of self it just a convention.

Attributes
* The variables inside the constructor.
* When we make a object of a class then we can access the methods and attributes of that class through the object of that class.
* Using the object, we can also make new attributes from out side of the class.

Reference Variable
* Reference variable holds the objects
* It stores the address of the object in memery location. for example: p = Person(), here p is reference variable.
* We can create object without reference variable as well, like p = Person(), we don't need p but we can make it like this: Person()=this is the object of person class, p=this is the reference variable which stores the address of that object.
* An object can have multiple reference variables like, 
p= Person()
q = Person()
p = q

Pass by Reference
* We can give the object as input to the function this is pass by reference, actually, we are not giving the object but the reference variable.
* Function can also return a object

Mutablity of object 
* By Default object of the class are mutable just like list, sets but we can also make it immutable.

Instance Variable
* The instance variable is type of variable which value is different for different object. for example , self.name = name, here self.name is the instance variable.


Encapsulation
* Make your data private means make private variables.
* Nothing is private in python. You can access private variable using this, Obj._ClassName__variablename.
* We can access the private data or varibale with the help of methods of that class.
* We can access the private variable or data with the help of getter and setter methods.

* List and dictionary of objects
We can store different objects in a list

* Static Variable
Static variable is class variable which is same for all object.
it is declare  like this Classname.Variablename eg, Atm.cid


* Class Relationships
Class has relationship of two types:
. Aggregation: One Class owns the other class. You cannot access private variable in aggregation.You have to use getter to access private variables.
. Inheritance: The child class can access the data and methods of parent class. this if for code reusablity. Example-Udemy

* What gets inherited?
. Constructor 
. Non Private Attributes
. Non Private Methods

If child class have not its constructor then first it executes the constructor of parent class.

If child class have its own constructor then it does not call the constructor of parent class.

Child can't access private members and methods of the parent class.

if parent and class have the method with same name then only child method will execute , it is call method overriding

* Super Keyword
By using super keyword you can use the methods and variables of the parent class.
Super cannnot access the variables
super cannot be used outside the class
super is used inside the class

* Inheritance in summary
A class can inherit from another class.

Inheritance improves code reuse

Constructor, attributes, methods get inherited to the child class

The parent has no access to the child class

Private properties of parent are not accessible directly in child class

Child class can override the attributes or methods. This is called method overriding

super() is an inbuilt function which is used to invoke the parent class methods and constructor

* Types of Inheritance
Single Inheritance
Multilevel Inheritance
Hierarchical Inheritance
Multiple Inheritance(Diamond Problem)
Hybrid Inheritance

* Single Inheritance
In this inheritance, there is a parent and a child and the child inherit from the parent.

* Multilevel Inhertance
In this inheritance, there will be a grandparent, parent and child class and the child class can inherit from parent and grandparent class.

* Hierarchical Inheritance
In this inheritance, there is one parent and multiple childrend and multiple child can inherit from one parent.

* Multiple Inheritance
In this inheritance, there will be one child and multiple parents, Java does not allow multiple inheritance but python does.

* Hybrid Inheritance
This is the combination of multiple type of inheritance.


* Polymorphism
The word "polymorphism" means "many forms", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes.

* Method Overinding:
If child and parent class has same methods then the object only call the method of child class. that is method overinding.

* Method Overloading:
Method overloading is a scenario where in a single class have 2 methods having same name but different behavior and output depending on the input.
This concept comes bcoz the code will be more clean in reading.
But we cannot implement this in python.

* Operator Overloading
Same operator showing different behavior or output depending on the input,
For example: hello' + 'world'=helloworld, 4 + 5 = 9, [1,2,3] + [4,5] = [1, 2, 3, 4, 5]

* Abstraction
Abstraction is a fundamental concept in Python programming that allows us to simplify complex concepts and focus on the essential details. It involves hiding unnecessary details and exposing only the relevant information to the users.
